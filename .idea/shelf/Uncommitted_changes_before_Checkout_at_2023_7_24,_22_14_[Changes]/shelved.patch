Index: HeavyIonAnalysis/TrackAnalysis/src/PYTHIA_gen.C
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#define MyClass_cxx\n// touch\n\n//try\n\n#include \"include/TrimPythia.h\"\n//below allows for rotation into jet frame\n#include \"include/coordinateTools.h\"\n//defines constants\n#include \"include/sherpa_constants.h\"\n\n#include <iostream>\n#include <iomanip>\n\n#include <vector>\n#include \"math.h\"\n#include <numeric>\n#include <string>\n#include <fstream>\n#include <algorithm>\n#include <iterator>\n\n#include <TStyle.h>\n#include \"TH1D.h\"\n#include \"TH2D.h\"\n#include \"TF1.h\"\n#include \"TCanvas.h\"\n#include \"TPad.h\"\n#include \"TProfile.h\"\n#include \"TGraph.h\"\n#include \"TMath.h\"\n#include \"TFile.h\"\n#include \"TTree.h\"\n#include \"TCutG.h\"\n#include \"TRandom3.h\"\n\nusing TMath::ATan;\nusing TMath::Exp;\n\n\n\n//Bool folds\n//{{{\n    bool F_eventpass(std::vector< float > *jetPt, int jetnumber, float jetPtCut){\n\n        if(jetPt->size() < 1)           return false;\n        if(jetnumber > 200)              return false;\n        if((*jetPt)[0] < jetPtCut) return false;\n        return true;\n    }\n\n    std::vector<int> F_JetSort(std::vector< float > * vphi, std::vector< float > * vphi2) {\n        std::vector<int> result(vphi->size());\n        float mR = *std::min_element(vphi->begin(), vphi->end());\n        float mG = *std::min_element(vphi2->begin(), vphi2->end());\n        float xR = *std::max_element(vphi->begin(), vphi->end());\n        float xG = *std::max_element(vphi2->begin(), vphi2->end());\n        if(fabs(xR)> 3.07 || fabs(mR) < .07 || fabs(xG) > 3.07 || fabs(mG) < .07 ){\n            std::iota(result.begin(), result.end(), 0);\n            std::sort(result.begin(), result.end(),\n                    [&](int A, int B) -> bool {\n                    return fabs((*vphi)[A]) > fabs((*vphi)[B]);\n                    });\n        }else{\n            std::iota(result.begin(), result.end(), 0);\n            std::sort(result.begin(), result.end(),\n                    [&](int A, int B) -> bool {\n                    return (*vphi)[A] > (*vphi)[B];\n                    });\n        }\n        return result;\n    }\n\n    std::vector<int> F_JetSortMult(std::vector< int > * vmult) {\n        std::vector<int> result(vmult->size());\n        std::iota(result.begin(), result.end(), 0);\n        std::sort(result.begin(), result.end(),\n                [&](int A, int B) -> bool {\n                return fabs((*vmult)[A]) > fabs((*vmult)[B]);\n                });\n        return result;\n    }\n\n    void  keepMatch(std::vector<int> keep, std::vector<int>& indices){\n        for(int i = keep.size() - 1; i >= 0; i--){\n            if(keep[i] < 2){\n                keep.erase(keep.begin() + i); \n                indices.erase(indices.begin() + i);\n            }\n        }\n    }\n\n    bool F_jetpass(std::vector< float > * jetEta, std::vector< float > * jetPt, int     ijet, float   jetPtCut){\n        if(fabs( (*jetEta)[ijet])   >jetEtaCut)   return false;\n        if((*jetPt)[ijet]           <jetPtCut)    return false;\n        return true;\n    }\n  //}}}\n\n// THIS IS WHERE THE MAIN CODE BEGINS\n\n\n\n\nvoid MyClass::Loop(int job, std::string fList){\ncout << \"TEST 1\" << endl;\n    TH1::SetDefaultSumw2(kTRUE);\n    TH2::SetDefaultSumw2(kTRUE);\n\n    bool PU_bool = 0;\n    int PUbin;\n    if(PU_bool==1){\n        PUbin = 3;\n    }else{\n        PUbin = 1;\n    }\n    bool smear_bool = 0;\n\n\n\n          double track_eta_lim = 5.0;\n          const int i40 = 40;\n          const int i470 = 470;\n          const int i3500 = 3500;\n          const int i50 = 50;\n          const int i500 = 500;\n          const int i1500 = 1500;\n          const int i150 = 150;\n          const int i100 = 100;\n\n          TH1D * hleadingJetPt = new TH1D(\"leadingJetPt\",\";Leading p_{T}^{gen};#sigma (pb)\",i50,i500,i1500);\n          TH1D * hjetPtReco = new TH1D(\"JetPtReco\",\";p_{T}^{gen};#sigma (pb)\",i150,i100,i3500);\n          TH1D * hjetPtGen = new  TH1D(\"JetPtGen\",\";p_{T}^{gen};#sigma (pb)\",i150,i100,i3500);\n\n      //}}}\n\n    //Initializing Histograms\n\n    TH2D* hPairs        = new TH2D(\"hPairs\",\"hPairs\",  trackbin, bin0,trackbin, ptbin, bin0, ptbin);\n\n    TH2D* hNtrig        = new TH2D(\"hNtrig\",\"hNtrig\",  trackbin, bin0,trackbin, ptbin, bin0, ptbin);\n\n\n    TH1D* hEvent_Pass   = new TH1D(\"hEvent_Pass\",\"hEvent_Pass\", trackbin,bin0,trackbin);\n    TH1D* hJet_Pass     = new TH1D(\"hJet_Pass\"  ,\"hJet_Pass\"  , trackbin,bin0,trackbin);\n    TH1D* hJetPt = new TH1D(\"hJetPt\"  ,\"hJetPt\" ,i150,i100,i3500);\n    TH1D* hBinDist_gen_single = new TH1D(\"hBinDist_gen_single\",\"hBinDist_gen_single\",bin360,bin0,bin120);\n    TH1D* hBinDist_reco_single = new TH1D(\"hBinDist_reco_single\",\"hBinDist_reco_single\",bin360,bin0,bin120);\n\n    //2D Corr histograms\n\n    TH2D* hEPDraw[trackbin][ptbin][PUbin];\n    TH2D* hSignalShifted[trackbin][ptbin][PUbin];\n    TH2D* hBckrndShifted[trackbin][ptbin][PUbin];\n\n\n    TH1D* hBinDist_gen[trackbin];\n    TH1D* hBinDist_reco[trackbin];\n    for(int wtrk = 1; wtrk<trackbin+1; wtrk++){\n        hBinDist_gen[wtrk-1]    = new TH1D(Form(\"hBinDist_gen_%d\",wtrk),Form(\"hBinDist_gen_%d\",wtrk), bin360, bin0, bin120);\n        hBinDist_reco[wtrk-1]    =  TH1D(Form(\"hBinDist_reco_%d\",wtrk),Form(\"hBinewnDist_reco_%d\",wtrk), bin360, bin0, bin120);\n        for(int wppt = 1; wppt<ptbin+1; wppt++){\n            for(int wpPU = 1; wpPU<PUbin+1; wpPU++){\n\n                //these are the main histograms\n\n                hBckrndShifted[wtrk-1][wppt-1][wpPU-1]      = new TH2D(Form(\"hBckrndS_trk_%d_ppt_%d_PU_%d\",wtrk,wppt,wpPU) ,Form(\"hBckrndS_trk_%d_ppt_%d_PU_%d\",wtrk,wppt,wpPU) ,41,-(20*EtaBW)-(0.5*EtaBW),(20*EtaBW)+(0.5*EtaBW),33,-(8*PhiBW)-0.5*PhiBW,(24*PhiBW)+0.5*PhiBW);\n                hSignalShifted[wtrk-1][wppt-1][wpPU-1]      = new TH2D(Form(\"hSignalS_trk_%d_ppt_%d_PU_%d\",wtrk,wppt,wpPU) ,Form(\"hSignalS_trk_%d_ppt_%d_PU_%d\",wtrk,wppt,wpPU) ,41,-(20*EtaBW)-(0.5*EtaBW),(20*EtaBW)+(0.5*EtaBW),33,-(8*PhiBW)-0.5*PhiBW,(24*PhiBW)+0.5*PhiBW);\n                hEPDraw[wtrk-1][wppt-1][wpPU-1]             = new TH2D(Form( \"hEPDraw_trk_%d_ppt_%d_PU_%d\",wtrk,wppt,wpPU) ,Form( \"hEPDraw_trk_%d_ppt_%d_PU_%d\",wtrk,wppt,wpPU) , EPD_xb   , EPD_xlo, EPD_xhi , EPD_yb      , EPD_ylo    , EPD_yhi);\n\n\n            }\n        }\n    }\n\n\n    std::cout << \"Starting event loop\" << std::endl;\n    std::cout << \"Total Number of Files in this Job: \" << fileList.size() << std::endl;\n\n\n//main loops\n    for(int f = 0; f<fileList.size(); f++){\n//processing data from CMS\n        fFile = TFile::Open(fileList.at(f).c_str(),\"read\");\n        TTree *tree = (TTree*)fFile->Get(\"trackTree\");\n        Init(tree);\n\n        std::cout << \"File \" << f+1 << \" out of \" << fileList.size() << std::endl;\n        Long64_t nbytes = 0, nb = 0;\n        Long64_t nentries = fChain->GetEntriesFast();\n        cout<<\"Total Entries is:\"<<endl;\n        cout<< nentries <<endl;\nstd::cout << \"File is \" << fileList.at(f).c_str() << endl;\n\n\n        // ENTERING EVENT LOOP\n        //for(int f = 0; f<fileList.size(); f++){\n\n\n        for (Long64_t ievent=0; ievent <nentries; ievent ++){\n                  Long64_t jevent = LoadTree(ievent);\n                  nb = fChain->GetEntry(ievent);   nbytes += nb;\n\n//what is the def of genDau_pt, genJetPt\n                  if(genJetPt->size()==0) continue;\n                  if(genJetChargedMultiplicity->size()==0) continue;\n\n\n                  if(!F_eventpass(genJetPt, genJetPt->size(), jetPtCut_Event)){\n                      continue;\n                  }\n                  int gjN = genJetPhi->size();\n\n\n            hEvent_Pass->Fill(1);\n\n            //ENTERING JET LOOP\n\n            //for(int f = 0; f<fileList.size(); f++){\n            //for (Long64_t ievent=0; ievent <nentries; ievent ++){\n            for(int kjet=0; kjet < genJetPt->size(); kjet++){\n\n                int ijet = kjet;\n                int Gjet = kjet;\n                long int NNtrk = (genDau_pt->at(ijet)).size();\n\n//defining how many particles are in the jet, set observable based on jet multiplicity\n//for example, what is the shape of jet(5,10,100 particles in jet)\n                if( fabs((*genJetEta)[ijet]) > jetEtaCut ) continue;\n                if( (*genJetPt)[ijet] < jetPtCut_Jet   ) continue;\n\n                // filling distributions within track bins\n                // ALSO VERY IMPORTANTLY changing the tkBool to 1 for this particular jet. This will be useful later when I create conditions for filling other histograms.\n                int tkBool[trackbin] = {0};\n\n                int n_G_ChargeMult_count =0;\n                for(int  G_trk=0; G_trk < NNtrk; G_trk++ ){\n                    if((*genDau_chg)[Gjet][G_trk] == 0) continue;\n                    if(fabs((*genDau_pt)[Gjet][G_trk])  < 0.3)     continue;\n                    if(fabs((*genDau_eta)[Gjet][G_trk]) > 2.4)     continue;\n                    n_G_ChargeMult_count += 1;\n                }//G_trk end\n\n                hBinDist_gen_single            ->Fill(n_G_ChargeMult_count);\n// what is hBinDist_gen and hBinDist_gen_single here\n// category the gen_jet by the multiplicity and record in tkBool, hJet_Pass, the ith hBinDist_gen records the charge mul\n// we could calculate\n                for(int i = 0; i < trackbin; i++){\n                    //if((*chargedMultiplicity)[indicesR[kjet]] >= trackbinbounds[i] && (*chargedMultiplicity)[indicesR[kjet]] < trackbinboundsUpper[i]){\n                    if(n_G_ChargeMult_count >= trackbinbounds[i] && n_G_ChargeMult_count < trackbinboundsUpper[i]){\n                        tkBool[i] = 1;\n                        hJet_Pass           ->Fill(i);\n                        hBinDist_gen[i]         ->Fill(n_G_ChargeMult_count);     \n                    }\n                }\n\n//\n\n                int Ntrig[trackbin][ptbin] = {0};\n                int NtrigM[trackbin][ptbin] = {0};\n                int NtrigP[trackbin][ptbin] = {0};\n                int A_ptBool[NNtrk][ptbin] = {0};\n\n                // VERY IMPORTANT calculating daughter pt wrt to jet axis.\n                // So this needs to be 2d vector, for pt bin and for daughter index.\n                // In each case I create a true false for that daughter falling in to the specific pt bin.\n                // Note this is NOT jet x daughter. It's pt bin x daughter\n\n                //for(int f = 0; f<fileList.size(); f++){\n                //for (Long64_t ievent=0; ievent <nentries; ievent ++){\n                //for(int ijet=0; ijet < jetCounter; ijet++){\n\n                //opening each file\n                //opening the tree\n                //building the histograms\n                //opening the events (pp)\n                //loading each jet in the event\n                //defining jet multiplicity\n                //for each particle in the jet,we build the DeltaX DeltaY to every other particle\n                //instead of X and Y we use Phi and Eta, pseudo rapidity\n\n\n\n                // first particle loop\n                for(int  A_trk=0; A_trk < NNtrk; A_trk++ ){\n                    if((*genDau_chg)[ijet][A_trk] == 0) continue;\n                    if(fabs((*genDau_pt)[ijet][A_trk])  < 0.3)     continue;\n                    if(fabs((*genDau_eta)[ijet][A_trk]) > 2.4) continue;\n\n                //         daughter pt wrt the jet axis                pt wrt jet\n                    double jet_dau_pt    =  ptWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][A_trk], (double)(*genDau_eta)[ijet][A_trk], (double)(*genDau_phi)[ijet][A_trk]);\n\n                    //excluding outside outermost limits.\n                    //if( jet_dau_pt < ptbinmin || jet_dau_pt > ptbinmax) continue;\n                    //loop through pt bins and fill the boolean array\n                    for(int i = 0; i < ptbin; i++){\n                        if(jet_dau_pt >= ptbinbounds_lo[i] && jet_dau_pt < ptbinbounds_hi[i]){\n                            A_ptBool[A_trk][i] = 1;\n                        }\n                    }\n                    //in the case where the total jet mult and the individual daughter pt is acceptable for this track bin and pt bin, we increase the Ntrig count.\n                    for(int i = 0; i < trackbin; i++){\n                        for(int j = 0; j < ptbin; j++){\n                            if(tkBool[i] + A_ptBool[A_trk][j] == 2){\n                                Ntrig[i][j] += 1;\n                                if((*genDau_chg)[ijet][A_trk] > 0){\n                                    NtrigP[i][j] += 1;\n                                }\n                                if((*genDau_chg)[ijet][A_trk] < 0){\n                                    NtrigM[i][j] += 1;\n                                }\n                            }\n                        }\n                    } \n\n                }//here ends the boolean array creations.\n\n                //continuation of main loops. Here is where the 2D Corr plots are created using the above booleans and \n\n                for(int i = 0; i < trackbin; i++){\n                    for(int j = 0; j < ptbin; j++){\n                        hNtrig->Fill(i,j,Ntrig[i][j]);\n                    }\n                }\n\n\n                // first particle loop\n\n                for(int  A_trk=0; A_trk < NNtrk; A_trk++ ){\n                    //this should be redundant if it passes the bools above? i guess it helps skip daughters faster. maybe i can reindex and run through the daughters quickly by aranging all the charged dauhghter sat the front.\n                    if((*genDau_chg)[ijet][A_trk] == 0) continue;\n                    if(fabs((*genDau_eta)[ijet][A_trk]) > 2.4) continue;\n                    if(fabs((*genDau_pt)[ijet][A_trk])  < 0.3)     continue;\n\n                //     daughter pt with respect to the jet axis                 pt With Respect To Jet \n                    double jet_dau_pt    =  ptWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][A_trk], (double)(*genDau_eta)[ijet][A_trk], (double)(*genDau_phi)[ijet][A_trk]);\n\n                    if(jet_dau_pt >3.0) continue;// why we drop this\n                    //if(jet_dau_pt <0.5) continue;\n\n\n\n                //     daughter eta with respect to the jet axis                 eta With Respect To Jet \n                    double jet_dau_eta   = etaWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][A_trk], (double)(*genDau_eta)[ijet][A_trk], (double)(*genDau_phi)[ijet][A_trk]);\n                //     daughter phi with respect to the jet axis                 phi With Respect To Jet \n                    double jet_dau_phi   = phiWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][A_trk], (double)(*genDau_eta)[ijet][A_trk], (double)(*genDau_phi)[ijet][A_trk]);\n\n                    double jet_dau_theta = 2*ATan(Exp(-(jet_dau_eta)));\n                    if(jet_dau_eta > track_eta_lim) continue;\n                    for(int i = 0; i < trackbin; i++){\n                        for(int j = 0; j < ptbin; j++){\n                            if(tkBool[i] + A_ptBool[A_trk][j] == 2){\n                                int k_PU=0; // why k_PU here\n\n                                hEPDraw[i][j][k_PU]->Fill(jet_dau_eta, jet_dau_phi, 1.0/( Ntrig[i][j] ));\n                            }\n                        }\n                    }\n\n                    if(A_trk == NNtrk - 1) continue;\n\n                    //A_trk is the first track from the first loop\n                    //T_trk is the second loop\n\n\n                    //n^2 complexity, second loop through all the particles\n                    for(long int T_trk=A_trk+1; T_trk< NNtrk; T_trk++ ){\n\n                        if((*genDau_chg)[ijet][T_trk] == 0) continue;\n                        if(fabs((*genDau_eta)[ijet][T_trk]) > 2.4) continue;\n                        if(fabs((*genDau_pt)[ijet][T_trk])  < 0.3)     continue;\n                        //if((*highPurity)[ijet][A_trk] == 0) continue;\n\n                        double T_jet_dau_pt    =  ptWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][T_trk], (double)(*genDau_eta)[ijet][T_trk], (double)(*genDau_phi)[ijet][T_trk]);\n\n                    if(T_jet_dau_pt >3.0) continue;\n                    //if(T_jet_dau_pt <0.5) continue;\n\n                        double T_jet_dau_eta   = etaWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][T_trk], (double)(*genDau_eta)[ijet][T_trk], (double)(*genDau_phi)[ijet][T_trk]);\n                        double T_jet_dau_phi   = phiWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][T_trk], (double)(*genDau_eta)[ijet][T_trk], (double)(*genDau_phi)[ijet][T_trk]);\n                        if(T_jet_dau_eta > track_eta_lim) continue;\n\n                        //correlation function\n                        //for every A track, we do this with each T track, so roughly n^2\n                                            //A_trk        T_trk\n                        double deltaEta = (jet_dau_eta - T_jet_dau_eta);\n                                                                    //A_trk        T_trk\n                        double deltaPhi = (TMath::ACos(TMath::Cos(jet_dau_phi - T_jet_dau_phi)));\n\n\n\n\n\n                        for(        int i = 0; i < trackbin; i++){\n                            for(    int j = 0; j < ptbin;    j++){ \n        \n\n\n                                if(tkBool[i] + A_ptBool[A_trk][j] + A_ptBool[T_trk][j] == 3){\n                                          hPairs->Fill(i,j);\n                                          int k_PU=0;\n                                          hSignalShifted[i][j][k_PU]->Fill(deltaEta, deltaPhi,                 ( 1./Ntrig[i][j]));\n                                          hSignalShifted[i][j][k_PU]->Fill(-deltaEta, deltaPhi,                ( 1./Ntrig[i][j]));\n                                          hSignalShifted[i][j][k_PU]->Fill(deltaEta, -deltaPhi,                ( 1./Ntrig[i][j]));\n                                          hSignalShifted[i][j][k_PU]->Fill(-deltaEta, -deltaPhi,               ( 1./Ntrig[i][j])); \n                                          hSignalShifted[i][j][k_PU]->Fill( deltaEta,2*TMath::Pi() - deltaPhi, ( 1./Ntrig[i][j]));\n                                          hSignalShifted[i][j][k_PU]->Fill(-deltaEta,2*TMath::Pi() - deltaPhi, ( 1./Ntrig[i][j]));\n\n                                      //}}}\n                                    // This is the mixed charge signal. Each duaghter will serve as a trigger so regular Ntrig suffices.\n                                    // EPdraw will constitute sampling from EPD_P and EPD_M for the pseudo particles. \n                                    // So that I take random phi and eta from P and random Phi and Eta from M and make a opposite sign difference.\n                                }\n                            }\n                        }\n                    }//T_trk\n                    }//A_trk\n                    }//kjet\n                    }//Event\n                    fFile->Close();\n                    }//File\n                    int backMult =10;\n                    //filling background\n                    //{{{\n                    //\n\nstd::cout<< \"made 4\" << endl;\n                          for(int wtrk = 1; wtrk < trackbin+1; wtrk++){\n                              std::cout << wtrk << \"/\" << trackbin << std::endl;\n                              for(int wppt = 1; wppt < ptbin+1; wppt++){\n                                  std::cout << wppt << \"/\" << ptbin << std::endl;\n                                  for(int wpPU = 1; wpPU < PUbin+1; wpPU++){\n                                      std::cout << wpPU << \"/\" << PUbin << std::endl;\n                                      //Nent is the number of pairs in the signal which we will try to 10x\n                                      //Xent is the number of pseudoparticles requried such that when we build the pairs nCp = Xent CHOOSE 2 will give \n                                      //us 10 times as many pairs as we have in the signal histogrm.\n\n                                      long int NENT =  hPairs->GetBinContent(wtrk, wppt);\n                                      long int XENT =  ((1+floor(sqrt(1+(4*2*backMult*NENT))))/2) ;\n                                      float A_ETA[XENT] = {0};\n                                      float A_PHI[XENT] = {0};\n\n\n                                      for(int x = 0; x<XENT; x++){\n                                          gRandom->SetSeed(0);\n                                          double WEta1, WPhi1;//making the pseudoparticles\n                                          hEPDraw[wtrk-1][wppt-1][wpPU-1]->GetRandom2(WEta1, WPhi1);\n                                          A_ETA[x] = WEta1;\n                                          A_PHI[x] = WPhi1;\n                                      }\n                                      for(long int i = 0; i < (XENT-1); i++){\n                                          for(long int j = (i+1); j < XENT; j++){\n\n                                              double WdeltaEta = (A_ETA[i]-A_ETA[j]);\n                                              double WdeltaPhi = (TMath::ACos(TMath::Cos(A_PHI[i]-A_PHI[j])));\n\n                                              hBckrndShifted[wtrk-1][wppt-1][wpPU-1]->Fill(WdeltaEta, WdeltaPhi, 1);//./XENT);\n                                              hBckrndShifted[wtrk-1][wppt-1][wpPU-1]->Fill(-WdeltaEta, WdeltaPhi, 1);//../XENT);\n                                              hBckrndShifted[wtrk-1][wppt-1][wpPU-1]->Fill(WdeltaEta, -WdeltaPhi, 1);//../XENT);\n                                              hBckrndShifted[wtrk-1][wppt-1][wpPU-1]->Fill(-WdeltaEta, -WdeltaPhi, 1);//../XENT);\n                                              hBckrndShifted[wtrk-1][wppt-1][wpPU-1]->Fill(WdeltaEta, 2*TMath::Pi() - WdeltaPhi, 1);//../XENT);\n                                              hBckrndShifted[wtrk-1][wppt-1][wpPU-1]->Fill(-WdeltaEta,2*TMath::Pi() - WdeltaPhi, 1);//../XENT);\n\n                                          }\n                                      }\n                                  }\n                              }\n                          }\n                      //}}}\n\n\n\n\n                    string subList = fList.substr(fList.size() - 3);\n\n                    TFile* fS_tempA = new TFile(Form(\"pythia_batch_output/root_out/job_%s.root\",subList.c_str()), \"recreate\");\n                    for(int wtrk =1; wtrk <trackbin+1; wtrk++){\n                        hBinDist_gen[wtrk-1]         ->Write();\n                        for(int wppt =1; wppt <ptbin+1; wppt++){\n                            for(int wpPU =1; wpPU<PUbin+1; wpPU++){\n\n                                hSignalShifted             [wtrk-1][wppt-1][wpPU-1]->Write(Form(\"hSigS_%d_to_%d_and_%d_to_%d_w_PU_%d\",trackbinbounds[wtrk-1],trackbinboundsUpper[wtrk-1] ,(int)(10*ptbinbounds_lo[wppt-1]),(int)(10*ptbinbounds_hi[wppt-1]),wpPU    ));\n                                hBckrndShifted             [wtrk-1][wppt-1][wpPU-1]->Write(Form(\"hBckS_%d_to_%d_and_%d_to_%d_w_PU_%d\",trackbinbounds[wtrk-1],trackbinboundsUpper[wtrk-1] ,(int)(10*ptbinbounds_lo[wppt-1]),(int)(10*ptbinbounds_hi[wppt-1]),wpPU    ));\n                                hEPDraw                    [wtrk-1][wppt-1][wpPU-1]->Write(Form(\"hEPD_%d_to_%d_and_%d_to_%d_w_PU_%d\",trackbinbounds[wtrk-1],trackbinboundsUpper[wtrk-1] ,(int)(10*ptbinbounds_lo[wppt-1]),(int)(10*ptbinbounds_hi[wppt-1]),wpPU     ));\n                            }\n                        }\n                    }\n\n                    hBinDist_gen_single->Write();\n                    hEvent_Pass   ->Write();\n                    hJet_Pass     ->Write();\n\n                    fS_tempA->Close();\n                    }\n\n\n                    //Code enters execution here\n                    int main(int argc, const char* argv[])\n                    {\n                        if(argc != 4)\n                        {\n                            std::cout << \"Usage: Z_mumu_Channel <fileList> <jobNumber> <nJobs>\" << std::endl;\n                            return 1;\n                        }\n\n\n                        //read input parameters\n                        std::string fList = argv[1];\n                        std::string buffer;\n                        std::vector<std::string> listOfFiles;\n                        std::ifstream inFile(fList.data());\n\n                        int job = (int)std::atoi(argv[2]);\n                        int nJobs = (int)std::atoi(argv[3]);\n\n\n                        //read the file list and spit it into a vector of strings based on how the parallelization is to be done\n                        //each vector is a separate subset of the fileList based on the job number\n                        if(!inFile.is_open())\n                        {\n                            std::cout << \"Error opening jet file. Exiting.\" <<std::endl;\n                            return 1;\n                        }\n                        else\n                        {\n                            int line = 0;\n                            while(true)\n                            {\n                                inFile >> buffer;\n                                if(inFile.eof()) break;\n                                if( line%nJobs == job) listOfFiles.push_back(buffer);\n                                line++;\n                            }\n                        }\n\n                        //create the MyClass Object\n                        MyClass m = MyClass(listOfFiles);\n                        m.Loop(job, fList);\n\n                        return 0;\n                    }\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HeavyIonAnalysis/TrackAnalysis/src/PYTHIA_gen.C b/HeavyIonAnalysis/TrackAnalysis/src/PYTHIA_gen.C
--- a/HeavyIonAnalysis/TrackAnalysis/src/PYTHIA_gen.C	
+++ b/HeavyIonAnalysis/TrackAnalysis/src/PYTHIA_gen.C	
@@ -1,7 +1,7 @@
 #define MyClass_cxx
 // touch
 
-//try
+
 
 #include "include/TrimPythia.h"
 //below allows for rotation into jet frame
@@ -335,7 +335,11 @@
                 //     daughter pt with respect to the jet axis                 pt With Respect To Jet 
                     double jet_dau_pt    =  ptWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][A_trk], (double)(*genDau_eta)[ijet][A_trk], (double)(*genDau_phi)[ijet][A_trk]);
 
+<<<<<<< HEAD
+                    //if(jet_dau_pt >3.0) continue;
+=======
                     if(jet_dau_pt >3.0) continue;// why we drop this
+>>>>>>> 8db22d7e64236e122b91a2227ad91ec6e4e26177
                     //if(jet_dau_pt <0.5) continue;
 
 
@@ -373,7 +377,7 @@
 
                         double T_jet_dau_pt    =  ptWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][T_trk], (double)(*genDau_eta)[ijet][T_trk], (double)(*genDau_phi)[ijet][T_trk]);
 
-                    if(T_jet_dau_pt >3.0) continue;
+                    //if(T_jet_dau_pt >3.0) continue;
                     //if(T_jet_dau_pt <0.5) continue;
 
                         double T_jet_dau_eta   = etaWRTJet((double)(*genJetPt)[ijet], (double)(*genJetEta)[ijet], (double)(*genJetPhi)[ijet], (double)(*genDau_pt)[ijet][T_trk], (double)(*genDau_eta)[ijet][T_trk], (double)(*genDau_phi)[ijet][T_trk]);
Index: testfile.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>duhjhjkh\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/testfile.txt b/testfile.txt
--- a/testfile.txt	
+++ b/testfile.txt	
@@ -1,2 +1,2 @@
-duhjhjkh
+duhj
 
Index: HeavyIonAnalysis/TrackAnalysis/batch/pythia_condor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import math\nimport subprocess\nname = \"pythia_batch_output.jdl\"\nf = open(name, \"w\")\n\ncommand_lines = '''Universe   = vanilla\nGetEnv     = True\nExecutable = pythia_batch_output/pythia_sub.sh\nArguments  = 000\nLog        = pythia_batch_output/log/submit_v0.$(Process).log\nOutput     = pythia_batch_output/out/submit_v0.$(Process).out\nError      = pythia_batch_output/err/submit_v0.$(Process).err\n+MaxRuntime =10000\nQueue\n'''\n\nwith open('../fileLists/pythia.txt') as fs:\n    line_count = 0\n    for line in fs:\n        line_count += 1\n\nline_count_frac = line_count/20.0 #for all pthatpythia\nfile_count = math.ceil(line_count_frac)\n\nfor i in range(1, int(file_count)):\n   temp = '''\nArguments  = %03d\nQueue\n   ''' % i\n   command_lines += temp\n\nf.write(command_lines)\nf.close()\nsubprocess.call([\"condor_submit\", name]);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_condor.py b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_condor.py
--- a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_condor.py	
+++ b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_condor.py	
@@ -14,7 +14,7 @@
 Queue
 '''
 
-with open('../fileLists/pythia.txt') as fs:
+with open('../fileLists/test.txt') as fs:
     line_count = 0
     for line in fs:
         line_count += 1
Index: HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output.jdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Universe   = vanilla\nGetEnv     = True\nExecutable = pythia_batch_output/pythia_sub.sh\nArguments  = 000\nLog        = pythia_batch_output/log/submit_v0.$(Process).log\nOutput     = pythia_batch_output/out/submit_v0.$(Process).out\nError      = pythia_batch_output/err/submit_v0.$(Process).err\n+MaxRuntime =10000\nQueue\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output.jdl b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output.jdl
--- a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output.jdl	
+++ b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output.jdl	
@@ -7,3 +7,52 @@
 Error      = pythia_batch_output/err/submit_v0.$(Process).err
 +MaxRuntime =10000
 Queue
+
+Arguments  = 001
+Queue
+   
+Arguments  = 002
+Queue
+   
+Arguments  = 003
+Queue
+   
+Arguments  = 004
+Queue
+   
+Arguments  = 005
+Queue
+   
+Arguments  = 006
+Queue
+   
+Arguments  = 007
+Queue
+   
+Arguments  = 008
+Queue
+   
+Arguments  = 009
+Queue
+   
+Arguments  = 010
+Queue
+   
+Arguments  = 011
+Queue
+   
+Arguments  = 012
+Queue
+   
+Arguments  = 013
+Queue
+   
+Arguments  = 014
+Queue
+   
+Arguments  = 015
+Queue
+   
+Arguments  = 016
+Queue
+   
\ No newline at end of file
Index: HeavyIonAnalysis/TrackAnalysis/batch/splitfiles
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>split -l20 -d -a 3 ../fileLists/pythia.txt        ./pythia_lists/list_cor_\nsplit -l20 -d -a 3 ../fileLists/sherpa.txt        ./sherpa_lists/list_cor_\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HeavyIonAnalysis/TrackAnalysis/batch/splitfiles b/HeavyIonAnalysis/TrackAnalysis/batch/splitfiles
--- a/HeavyIonAnalysis/TrackAnalysis/batch/splitfiles	
+++ b/HeavyIonAnalysis/TrackAnalysis/batch/splitfiles	
@@ -1,2 +1,3 @@
+split -l10 -d -a 3 ../fileLists/test.txt        ./pythia_lists/list_cor_
 split -l20 -d -a 3 ../fileLists/pythia.txt        ./pythia_lists/list_cor_
 split -l20 -d -a 3 ../fileLists/sherpa.txt        ./sherpa_lists/list_cor_
Index: HeavyIonAnalysis/TrackAnalysis/batch/pythia_lists/list_cor_000
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>~/pp_highMultGen_CP5_inclusive_10.root\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_lists/list_cor_000 b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_lists/list_cor_000
--- a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_lists/list_cor_000	
+++ b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_lists/list_cor_000	
@@ -1,1 +1,1 @@
-~/pp_highMultGen_CP5_inclusive_10.root
+~/StorageArea/PYTHIA_CP5/pp_highMultGen_CP5_inclusive_10.root
Index: HeavyIonAnalysis/TrackAnalysis/Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>ROOT=`root-config --cflags --glibs`\nCXX=g++\nCXXFLAGS=-Wall -O2 -Wextra -std=c++11\nifeq \"$(GCCVERSION)\" \"1\"\n  CXXFLAGS += -Wno-error=misleading-indentation\nendif\n\nMKDIR_BIN=mkdir -p $(PWD)/bin\n\nall: mkdirBin  bin/PYTHIA_gen.exe bin/SHERPA_gen.exe \n\nmkdirBin:\n\t$(MKDIR_BIN)\n\nbin/PYTHIA_gen.exe: src/PYTHIA_gen.C\n\t$(CXX) $(CXXFLAGS) -Wno-error=maybe-uninitialized $(ROOT) -I $(PWD) -o bin/PYTHIA_gen.exe src/PYTHIA_gen.C\nbin/SHERPA_gen.exe: src/SHERPA_gen.C\n\t$(CXX) $(CXXFLAGS) -Wno-error=maybe-uninitialized $(ROOT) -I $(PWD) -o bin/SHERPA_gen.exe src/SHERPA_gen.C\n\n\nclean:\n\trm -f $(PWD)/include/*~\n\trm -f $(PWD)/src/*~\n\trm -f $(PWD)/src/*.so\n\trm -f $(PWD)/src/*.d\n\trm -f $(PWD)/src/*.pcm\n\trm -f $(PWD)/bin/*.exe\n\trmdir bin\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HeavyIonAnalysis/TrackAnalysis/Makefile b/HeavyIonAnalysis/TrackAnalysis/Makefile
--- a/HeavyIonAnalysis/TrackAnalysis/Makefile	
+++ b/HeavyIonAnalysis/TrackAnalysis/Makefile	
@@ -7,7 +7,7 @@
 
 MKDIR_BIN=mkdir -p $(PWD)/bin
 
-all: mkdirBin  bin/PYTHIA_gen.exe bin/SHERPA_gen.exe 
+all: mkdirBin  bin/PYTHIA_gen.exe bin/SHERPA_gen.exe bin/PYTHIA_gen_2.exe 
 
 mkdirBin:
 	$(MKDIR_BIN)
@@ -16,6 +16,8 @@
 	$(CXX) $(CXXFLAGS) -Wno-error=maybe-uninitialized $(ROOT) -I $(PWD) -o bin/PYTHIA_gen.exe src/PYTHIA_gen.C
 bin/SHERPA_gen.exe: src/SHERPA_gen.C
 	$(CXX) $(CXXFLAGS) -Wno-error=maybe-uninitialized $(ROOT) -I $(PWD) -o bin/SHERPA_gen.exe src/SHERPA_gen.C
+bin/PYTHIA_gen_2.exe: src/PYTHIA_gen_2.C
+	$(CXX) $(CXXFLAGS) -Wno-error=maybe-uninitialized $(ROOT) -I $(PWD) -o bin/PYTHIA_gen_2.exe src/PYTHIA_gen_2.C
 
 
 clean:
Index: HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/pythia_sub.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/bin/sh\n\n#source /cvmfs/cms.cern.ch/cmsset_default.sh\n#export SCRAM_ARCH=slc7_amd64_gcc700\n\ncd ~/local_not_scp/CMSSW_10_6_4_patch1/src\n\n#cmsenv\neval `scramv1 runtime -sh`\ncd ~/for_jiahao/HeavyIonAnalysis/TrackAnalysis/batch\necho PWD: $PWD\n../bin/PYTHIA_gen.exe ./pythia_lists/list_cor_$1 0 1\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/pythia_sub.sh b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/pythia_sub.sh
--- a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/pythia_sub.sh	
+++ b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/pythia_sub.sh	
@@ -5,7 +5,14 @@
 
 cd ~/local_not_scp/CMSSW_10_6_4_patch1/src
 
+<<<<<<< HEAD
+cd ~/CMSSW_10_6_4_patch1/src
+
 #cmsenv
+
+=======
+#cmsenv
+>>>>>>> 8db22d7e64236e122b91a2227ad91ec6e4e26177
 eval `scramv1 runtime -sh`
 cd ~/for_jiahao/HeavyIonAnalysis/TrackAnalysis/batch
 echo PWD: $PWD
Index: HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/err/submit_v0.0.err
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/err/submit_v0.0.err b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/err/submit_v0.0.err
--- a/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/err/submit_v0.0.err	
+++ b/HeavyIonAnalysis/TrackAnalysis/batch/pythia_batch_output/err/submit_v0.0.err	
@@ -1,0 +1,8 @@
+perl: warning: Setting locale failed.
+perl: warning: Please check that your locale settings:
+	LANGUAGE = (unset),
+	LC_ALL = (unset),
+	LC_CTYPE = "UTF-8",
+	LANG = "C"
+    are supported and installed on your system.
+perl: warning: Falling back to the standard locale ("C").
